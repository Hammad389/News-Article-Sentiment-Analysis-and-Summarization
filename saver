Absolutely, Hammad — here’s a much **simpler and cleaner way** to achieve:

* `created_at` column: stores the time the row was created.
* `updated_at` column: updates every time the row is modified.
* Update the database each time the scraper runs.

---

### ✅ Step 1: Add Timestamps to Your Models

Use Python’s `datetime.utcnow` with SQLAlchemy `DateTime`.

```python
from sqlalchemy import Column, DateTime, String, Integer, Float, Boolean, Text, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from datetime import datetime

Base = declarative_base()

class CommunityData(Base):
    __tablename__ = "community_data"

    id = Column(Integer, primary_key=True, autoincrement=True)
    community_name = Column(String(100), unique=True, nullable=False)
    community_address = Column(String(200), nullable=False)
    community_rent = Column(Float, nullable=True)
    community_rooms = Column(Integer, nullable=True)
    community_description = Column(Text, nullable=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class ApartmentData(Base):
    __tablename__ = "apartment_data"

    id = Column(Integer, primary_key=True, autoincrement=True)
    community = Column(String(100), ForeignKey('community_data.community_name'))
    apartment_no = Column(String(50), nullable=True)
    no_of_bedrooms = Column(Integer, nullable=True)
    no_of_bathrooms = Column(Integer, nullable=True)
    area = Column(Integer, nullable=True)
    floor_no = Column(Integer, nullable=True)
    availability = Column(Boolean, nullable=True)
    deposit = Column(Float, nullable=True)
    Max_rent = Column(Float, nullable=True)
    Min_rent = Column(Float, nullable=True)
    amenities = Column(Text, nullable=True)
    community_amenities = Column(Text, nullable=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
```

---

### ✅ Step 2: In Your Scraper — Add or Update Data

Here’s a simple pattern for inserting or updating:

```python
def save_or_update(session, data_dict, model_class, unique_field):
    existing = session.query(model_class).filter_by(**{unique_field: data_dict[unique_field]}).first()
    if existing:
        for key, value in data_dict.items():
            setattr(existing, key, value)
    else:
        session.add(model_class(**data_dict))
    session.commit()
```

**Usage Example**:

```python
community_data = {
    'community_name': 'My Community',
    'community_address': '123 Some Street',
    'community_rent': 1000,
    'community_rooms': 3,
    'community_description': 'Nice place'
}

save_or_update(session, community_data, CommunityData, 'community_name')
```

This:

* Creates `created_at` when inserting.
* Updates `updated_at` automatically if fields change.

---

Let me know if you want me to bundle this into a ready-to-copy scraper pattern for you.
