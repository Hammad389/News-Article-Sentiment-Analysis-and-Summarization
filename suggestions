session_mutiple = self.Session_multiple()
try:
    # Update or Insert Community
    community = session_mutiple.query(CommunityData).filter_by(community_name=item['community_name']).first()
    if community:
        community.community_address = item.get('community_address')
        community.community_rent = item.get('community_rent')
        community.community_rooms = item.get('community_rooms')
        community.community_description = item.get('community_description')
        community.community_amenities = ', '.join(item.get('community_amenities', [])) if item.get('community_amenities') else ''
    else:
        community = CommunityData(
            community_name=item.get('community_name'),
            community_address=item.get('community_address'),
            community_rent=item.get('community_rent'),
            community_rooms=item.get('community_rooms'),
            community_description=item.get('community_description'),
            community_amenities=', '.join(item.get('community_amenities', [])) if item.get('community_amenities') else ''
        )
        session_mutiple.add(community)
        session_mutiple.commit()  # Commit to get community ID if using foreign key later

    # Update or Insert Apartment
    apartment = session_mutiple.query(ApartmentData).filter_by(apartment_no=item['apartment_no']).first()
    if apartment:
        apartment.community = community.community_name
        apartment.no_of_bedrooms = item.get('no_of_bedrooms')
        apartment.no_of_bathrooms = item.get('no_of_bathrooms')
        apartment.area = item.get('area')
        apartment.floor_no = item.get('floor_no')
        apartment.availability = item.get('availability')
        apartment.deposit = item.get('deposit')
        apartment.Max_rent = item.get('Max_rent')
        apartment.Min_rent = item.get('Min_rent')
        apartment.amenities = ', '.join(item.get('amenities', []))
    else:
        apartment = ApartmentData(
            apartment_no=item.get('apartment_no'),
            community=community.community_name,
            no_of_bedrooms=item.get('no_of_bedrooms'),
            no_of_bathrooms=item.get('no_of_bathrooms'),
            area=item.get('area'),
            floor_no=item.get('floor_no'),
            availability=item.get('availability'),
            deposit=item.get('deposit'),
            Max_rent=item.get('Max_rent'),
            Min_rent=item.get('Min_rent'),
            amenities=', '.join(item.get('amenities', []))
        )
        session_mutiple.add(apartment)

    session_mutiple.commit()

    # Update or Insert RentMatrixData
    for i in item['raw_rent_matrix']:
        rent = session_mutiple.query(RentMatrixData).filter_by(
            apartement=apartment.apartment_no,
            move_in_date=i.get('MoveInDate'),
            lease_term=i.get('LeaseTerm')
        ).first()

        if rent:
            rent.rent = i.get('Rent')
            rent.corporate_rent = i.get('CorporateRent')
            rent.furnished_rent = i.get('FurnishedRent')
        else:
            rent_matrix_record = RentMatrixData(
                apartement=apartment.apartment_no,
                move_in_date=i.get('MoveInDate'),
                lease_term=i.get('LeaseTerm'),
                rent=i.get('Rent'),
                corporate_rent=i.get('CorporateRent'),
                furnished_rent=i.get('FurnishedRent')
            )
            session_mutiple.add(rent_matrix_record)

    session_mutiple.commit()
    session_mutiple.close()
    return item
